library(HYDAT)
?HYDAT
install.packages("lubridate")
install.packages("reshape")
library(HYDAT)
?HYDAT
?AnnualHydrometric
?HYDAT
?DailyHydrometric
library(RSQLite)
hydat.path <- "C:\\users\\hutchinsond\\downloads\\Hydat.sqlite3"
con <- dbiConnect(hydat.path)
library(SQLite)
library(RSQLite)
con <- dbiConnect(hydat.path)
con <- dbConnect(hydat.path)
con <- dbConnect(SQLite(), hydat.path)
f <- SummarizeDataCollection(con, stn.list)
stn.list <- c("08MF005")
f <- SummarizeDataCollection(con, stn.list)
f
f <- ParticleSizeDistribution(con, stn.list)
f
head(f)
library(HYDAT)
?HYDAT
?AnnualHydrometric
library(RSQLite)
con <- dbConnect(SQLite())
con <- dbConnect(SQLite(), 'c:\\users\\hutchinsond\\downloads\\hydat.sqlite3')
f <- StationDataCollection(con, "08MF005")
f
f <- StationDataTypes(con, c("08MF005","08LG010"))
f
f
f <- StationRegulation(con, c("08MF005","08LG010"))
f
f <- StationRegulation(con, c("08MF005","08LG010","08MG005"))
f
f <- AnnualHydrometric(con, c("08MF005","08LG010","08MG005"))
?AnnualHydrometric
f <- AnnualHydrometric(con, TRUE, c("08MF005","08LG010","08MG005"))
f
f <- AnnualHydrometric(con, "08LF051")
f <- AnnualHydrometric(con, TRUE,"08LF051")
f
f <- AnnualPeaks(con, T, "01AD001")
head(f)
f
head(f)
plot(f$YEAR, f$VALUE)
library(reshape)
library(reshape)
?melt
DailyHydrometric <- function(con, getFlow=TRUE, stationID) {
table <- ifelse(getFlow, "DLY_FLOWS", "DLY_LEVELS")
# prepare SQL command
sqlString <- c("SELECT * FROM %s ",
"WHERE STATION_NUMBER in (%s)")
sqlString[1] <- sprintf(sqlString[1], table)
sqlString[2] <- sprintf(sqlString[2], paste(sprintf("\'%s\'", stationID), collapse=","))
sqlString <- paste(sqlString, collapse="")
# execute query
data <- dbGetQuery(con, sqlString)
if(nrow(data)==0){
warning("No records found!")
return(NULL)
}
# find appropriate columns for values
header <- ifelse(getFlow, "^FLOW\\d+", "^LEVEL\\d+")
value.cols <- colnames(data)[grep(header, colnames(data))]
header <- ifelse(getFlow, "^FLOW_SYMBOL\\d+", "^LEVEL_SYMBOL\\d+")
flag.cols <- colnames(data)[grep(header, colnames(data))]
# now melt the data frame for data and flags
dly.data <- melt(data, id.vars=c("STATION_NUMBER", "YEAR", "MONTH"), measure.vars=value.cols)
dly.flags <- melt(data, id.vars=c("STATION_NUMBER", "YEAR", "MONTH"), measure.vars=flag.cols)
# extract flag 'value' and attach to data
dly.data$FLAG <- dly.flags$value
# we now need to extract the day from the 'variable' column in the data frame
if(getFlow) {
dly.data$DAY <- as.numeric(substr(dly.data$variable, 5, 6))
} else {
dly.data$DAY <- as.numeric(substr(dly.data$variable, 6, 7))
}
# censor ambiguous dates (e.g., 31st day for Apr, Jun, Sept, Nov)
d <- which((dly.data$MONTH %in% c(4,6,9,11)) & (dly.data$DAY > 30))
if(length(d) > 0) {
dly.data <- dly.data[-d,]
dly.flags <- dly.flags[-d,]
}
# censor ambiguous dates in February
d <- which((dly.data$MONTH == 2) & leap_year(dly.data$YEAR) & (dly.data$DAY > 29))
if(length(d)> 0) {
dly.data <- dly.data[-d,]
}
d <- which((dly.data$MONTH == 2) & !leap_year(dly.data$YEAR) & (dly.data$DAY > 28))
if(length(d)>0){
dly.data <- dly.data[-d,]
}
# coerce date
dly.data$DATE <- as.Date(sprintf("%04d-%02d-%02d",
dly.data$YEAR, dly.data$MONTH,
dly.data$DAY))
# sort the data frame by ascending DATE
dly.data <- dly.data[order(dly.data$DATE),]
return(
data.frame(
STATION_NUMBER = as.character(dly.data$STATION_NUMBER),
DATE = dly.data$DATE,
VALUE = dly.data$value,
FLAG = as.character(dly.data$FLAG),
stringsAsFactors = FALSE
)
)
}
source('~/.active-rstudio-document', echo=TRUE)
?melt
rm(list=ls())
?reshape
library(reshape2)
?melt
roxygen2::roxygenize()
install.packages("reshape")
install.packages("reshape")
library(HYDAT)
library(HYDAT)
?AnnualHydrometric
library(HYDAT)
?HYDAT
library(HYDAT)
?HYDAT
?melt
library(HYDAT)
?DailyHydrometric
DailyHydrometric <- function(con, getFlow=TRUE, stationID) {
table <- ifelse(getFlow, "DLY_FLOWS", "DLY_LEVELS")
# prepare SQL command
sqlString <- c("SELECT * FROM %s ",
"WHERE STATION_NUMBER in (%s)")
sqlString[1] <- sprintf(sqlString[1], table)
sqlString[2] <- sprintf(sqlString[2], paste(sprintf("\'%s\'", stationID), collapse=","))
sqlString <- paste(sqlString, collapse="")
# execute query
data <- dbGetQuery(con, sqlString)
if(nrow(data)==0){
warning("No records found!")
return(NULL)
}
# find appropriate columns for values
header <- ifelse(getFlow, "^FLOW\\d+", "^LEVEL\\d+")
value.cols <- colnames(data)[grep(header, colnames(data))]
header <- ifelse(getFlow, "^FLOW_SYMBOL\\d+", "^LEVEL_SYMBOL\\d+")
flag.cols <- colnames(data)[grep(header, colnames(data))]
# now melt the data frame for data and flags
dly.data <- melt(data, id.vars=c("STATION_NUMBER", "YEAR", "MONTH"), measure.vars=value.cols)
dly.flags <- melt(data, id.vars=c("STATION_NUMBER", "YEAR", "MONTH"), measure.vars=flag.cols)
# extract flag 'value' and attach to data
dly.data$FLAG <- dly.flags$value
# we now need to extract the day from the 'variable' column in the data frame
if(getFlow) {
dly.data$DAY <- as.numeric(substr(dly.data$variable, 5, 6))
} else {
dly.data$DAY <- as.numeric(substr(dly.data$variable, 6, 7))
}
# censor ambiguous dates (e.g., 31st day for Apr, Jun, Sept, Nov)
d <- which((dly.data$MONTH %in% c(4,6,9,11)) & (dly.data$DAY > 30))
if(length(d) > 0) {
dly.data <- dly.data[-d,]
dly.flags <- dly.flags[-d,]
}
# censor ambiguous dates in February
d <- which((dly.data$MONTH == 2) & leap_year(dly.data$YEAR) & (dly.data$DAY > 29))
if(length(d)> 0) {
dly.data <- dly.data[-d,]
}
d <- which((dly.data$MONTH == 2) & !leap_year(dly.data$YEAR) & (dly.data$DAY > 28))
if(length(d)>0){
dly.data <- dly.data[-d,]
}
# coerce date
dly.data$DATE <- as.Date(sprintf("%04d-%02d-%02d",
dly.data$YEAR, dly.data$MONTH,
dly.data$DAY))
# sort the data frame by ascending DATE
dly.data <- dly.data[order(dly.data$DATE),]
return(
data.frame(
STATION_NUMBER = as.character(dly.data$STATION_NUMBER),
DATE = dly.data$DATE,
VALUE = dly.data$value,
FLAG = as.character(dly.data$FLAG),
stringsAsFactors = FALSE
)
)
}
library(RSQLite)
path <- "c:\\users\\hutchinsond\\downloads\\hydat.sqlite3"
con <- dbConnect(SQLite(), path)
d <- DailyHydrometric(con, stationID="08MF005")
library(reshape2)
d <- DailyHydrometric(con, stationID="08MF005")
library(lubridate)
d <- DailyHydrometric(con, stationID="08MF005")
head(d)
library(HYDAT)
library(HYAT)
library(HYDAT)
?HYDAT
data <- RealTimeData(provTerr=”SK”, stationID=”05HG001”)
data <- RealTimeData(provTerr="SK", stationID="05HG001”)
RealTimeData
library(HYDAT)
?HYDTA
?HYDAT
GetHYDAT <- function(url = "ftp://arccf10.tor.ec.gc.ca/wsc/software/HYDAT/", loc) {
files <- getURL(url, ftp.use.epsv=TRUE, dirlistonly=TRUE)
files <- unlist(strsplit(files, "\r\n"))
# is the SQLite version found?
f <- grep("^HYDAT_sqlite", files, ignore.case=TRUE)
if(f > 0) {
print(sprintf("Latest version: %s", f[1]))
}
}
library(devtools)
library(devtools)
document()
build()
build()
install()
install()
?gsub
library(HYDAT)
library(HYDAT)
library(HYDAT)
library(HYDAT)
487/12
library(HYDAT)
library(HYDAT)
?HYDAT
library(HYDAT)
?HYDAT
library(HYDAT)
library(HYDAT)
?HYDAT
roxygenize()
library(roxygen2)
roxygenize()
library(HYDAT)
?HYDAT
roxygenize()
roxygenize()
library(HYDAT)
?HYDAT
roxygenise()
library(HYDAT)
library(HYDAT)
library(HYDAT)
library(HYDAT)
roxygenise()
library(HYDAT)
roxygenise()
library(HYDAT)
library(HYDAT)
library(HYDAT)
roxygenize()
library(roxygen2)
roxygenise()
library(HYDAT)
?HYDAT
fraserAtHope <- RealTimeData(prov_terr_loc="BC", station_number="08MF005")
plot(
fraserAtHope$datetime
fraserAtHope$qr,
type="l", col="blue",
xlab="DateTime [UTC]", ylab="Discharge" )
fraserAtHope <- RealTimeData(prov_terr_loc="BC", station_number="08MF005")
plot(
fraserAtHope$datetime,
fraserAtHope$qr,
type="l", col="blue",
xlab="DateTime [UTC]", ylab="Discharge" )
head(fraserAtHope)
roxygenize()
library(HYDAT)
fraserAtHope <- RealTimeData(prov_terr_loc="BC", station_number="08MF005")
plot(
fraserAtHope$date_time
fraserAtHope$qr,
type="l", col="blue",
xlab="DateTime [UTC]", ylab="Discharge" )
View(fraserAtHope)
plot(fraserAtHope$date_time, fraserAtHope$hg)
roxygenize
roxygenize()
library(HYDAT)
data <- RealTimeData(prov_terr_loc="BC", station_number="08MF005")
plot(
data$date_time,
data$qr,
type="l", col="blue",
xlab="DateTime [UTC]", ylab="Discharge" )
data <- RealTimeData(prov_terr_loc="BC", station_number="08KB005")
plot(
data$date_time,
data$qr,
type="l", col="blue",
xlab="DateTime [UTC]", ylab="Discharge" )
data <- RealTimeData(prov_terr_loc="BC", station_number="08KB001")
plot(
data$date_time,
data$qr,
type="l", col="blue",
xlab="DateTime [UTC]", ylab="Discharge" )
d <- StationMetadata(d,"08MF005")
library(RSQLite)
con <- dbConnect(RSQLite::SQLite(), "Documents/Hydat.sqlite3")
getwd()
con <- dbConnect(RSQLite::SQLite(), "../../Hydat.sqlite3")
str(con)
dbIsValid(con)
?dbIsValid
dbGetInfo(con)
dbExistsTable(con, "dly_flow")
dbExistsTable(con, "stations")
dbExistsTable(con, "DLY_FLOWS")
dbExistsTable(con, "dly_flows")
roxygenise()
library(HYDAT)
?HYDAT
AnnualHydrometricData(con, T,"08MF005")
AnnualHydrometricData(c, T,"08MF005")
library(RSQLite)
AnnualHydrometricData(c, T,"08MF005")
?dbIsValid
?RSQLite
roxygenize()
library(HYDAT)
library(RSQLite)
AnnualHydrometricData(d, T, "08MF005")
d <- 1
AnnualHydrometricData(d, T, "08MF005")
roxygenise()
library(HYDAT)
roxygenize()
library(HYDAT)
roxygenize()
library(HYDAT)
library(HYDAT)
roxygenize()
library(HYDAT)
roxygenize()
library(HYDAT)
roxygenize()
library(HYDAT)
roxygenize()
library(HYDAT)
roxygenize()
library(HYDAT)
?dbGetQuery
library(RSQLite)
?dbGetQuery
library(HYDAT)
?`DBIConnection-class`
library(HYDAT)
library(roxygen2)
roxygenise()
library(HYDAT)
library(HYDAT)
roxygenise()
roxygenise()
library(HYDAT)
library(HYDAT)
roxygenise()
library(HYDAT)
library(HYDAT)
library(HYDAT)
?HYDAT
library(HYDAT)
library(brew)
?brew
library(HYDAT)
R CMD Rd2pdf
library(HYDAT)
library(HYDAT)
library(HYDAT)
library(HYDAT)
library(HYDAT)
library(HYDAT)
library(HYDAT)
library(HYDAT)
EstimateStationElevation <- function(latitude, longitude) {
url <- "http://geogratis.gc.ca/services/elevation/cdem/altitude?lat=%s&lon=%s"
data <- read.table(sprintf(url, latitude, longitude))
# now parse xml
return(data)
}
d <- EstimateStationElevation(50.5, -123)
EstimateStationElevation <- function(latitude, longitude) {
url <- "http://geogratis.gc.ca/services/elevation/cdem/altitude?lat=%s&lon=%s"
data <- readLines (sprintf(url, latitude, longitude))
# now parse xml
return(data)
}
d <- EstimateStationElevation(50.5, -123)
library(HYDAT)
infile <- "http://dd.weatheroffice.ec.gc.ca/hydrometric/csv/hourly/BC_07EA004_hourly_hydrometric.csv"
h <- try(read.table(infile[1], header=TRUE, sep=",", stringsAsFactors=FALSE))
infile <- "http://dd.weather.ec.gc.ca/hydrometric/csv/hourly/BC_07EA004_hourly_hydrometric.csv"
h <- try(read.table(infile[1], header=TRUE, sep=",", stringsAsFactors=FALSE))
infile <- "http://dd.weather.ec.gc.ca/hydrometric/csv/bc/hourly/BC_07EA004_hourly_hydrometric.csv"
h <- try(read.table(infile[1], header=TRUE, sep=",", stringsAsFactors=FALSE))
infile <- "http://dd.weather.ec.gc.ca/hydrometric/csv/bc/hourly/BC_07EA004_hourly_hydrometric.csv"
infile <- "http://dd.weather.gc.ca/hydrometric/csv/BC/hourly/BC_07EA004_hourly_hydrometric.csv"
h <- read.table((infile, header=T, sep = ","))
h <- read.table(infile, header=T, sep = ",")
head(h)
head(h)
colnames(h) <- colHeaders
h <- read.table(infile, header=T, sep = ",", stringsAsFactors = F)
colHeaders <- c("station_number", "date_time", "hg", "hg_grade", "hg_sym", "hg_code",
"qr", "qr_grade", "qr_sym", "qr_code")
colnames(h) <- colHeaders
head(h)
h$date_time <- gsub("([+-]\\d\\d)(:)","\\1", h$date_time)
head(d)
head(h
)
h$date_new <- strptime(h$date_time, "%FT%T%z", tz="UTC")
head(h)
library(HYDAT)
library(HYDAT)
RealTimeNetwork <- function(base_url = "http://dd.weather.gc.ca/hydrometric/doc",
master_file = "hydrometric_StationList.csv") {
infile <- sprintf("%s\\%s", base_url, master_file)
data <- read.table(infile, sep=",", header=TRUE, stringsAsFactors=FALSE)
colnames(data) <- c("station_number", "name", "latitude", "longitude",
"prov_terr_loc", "timezone")
return(data)
}
d <- RealTimeNetwork()
RealTimeNetwork <- function(base_url = "http://dd.weather.gc.ca/hydrometric/doc",
master_file = "hydrometric_StationList.csv") {
infile <- sprintf("%s/%s", base_url, master_file)
data <- read.table(infile, sep=",", header=TRUE, stringsAsFactors=FALSE)
colnames(data) <- c("station_number", "name", "latitude", "longitude",
"prov_terr_loc", "timezone")
return(data)
}
d <- RealTimeNetwork()
d
head(d)
library(HYDAT)
install.packages("roxygen2")
library(HYDAT)
library(HYDAT)
d <- RealTimeNetwork()
head(d)
